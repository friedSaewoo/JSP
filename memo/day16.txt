------------------------------------------------
프론트 컨트롤러에서는 비즈니스 로직을 구현하지 않으며 각각의 컨트롤러와 DAO 클래스를 만들어 사용한다!

DB와 연결하여 쿼리를 실행시키는 코드는 DAO에서 처리하도록 만든다
MemberDAO에서는 회원과 관련된 모든 DB 퍼리를 메소드로 만들어 놓으면 된다
컨트롤러에서 DAO에서 만든 메소드를 사용한다
인터페이스 Execute() 추상메소드 반환타입(어디로, 어떻게 갈지)을 만든다
모든 컨트롤러에서 인터페이스를 상속받아서 사용한다.
------------------------------------------------
쿠키(Cookie)
	웹서버에서 클라이언트 전송해주는 작은 데이터 조각이며, 사용자의 웹 브라우저에 저장된다.
	같은 서버에 요청을 보내게 되면 웹 브라우저가 요청 헤더에 담아서 보내준다
	서버에서 관리하지 않기 때문에 서버의 부담은 줄어들지만
	클라이언트에 저장되는 정보이기 때문에 보안상 문제가 발생할 수 있으며
	클라이언트쪽에서 쿠키를 삭제하지 않으면 쿠키는 정해진 시간동안 계속 남아있게 된다

쿠키동작방식
1. 클라이언트가 서버에 요청을 보낸다.
2. 웹 서버에서 쿠키를 생성하여 클라이언트에게 응답을 보낸다.
3. 브라우저가 쿠키를 저장한다.
4. 이후 같은 서버로 요청을 보내게 되면 요청에 쿠키를 담아서 보낸다.
5. 서버는 해당 쿠키에서 필요한 데이터를 꺼내서 사용한다

쿠키 메소드
setMaxAge() : 쿠키의 유효기간 설정
getName()   : 쿠키이름을 얻음
getValue()  : 쿠키 값을 얻음
getVersion(): 쿠키 버전을 얻음
setVersion(): 쿠키 버전 설정
setValue()  : 쿠키값을 설정

세션(Session)
	세션은 클라이언트가 서버에 요청을 보내면 자동으로 생성되며, 서버에서 세션의 유효기간을
	따로 설정하지 않았다면 브라우저를 종료할 때 까지는 자동으로 남아있으며 종료되면 자동으로 삭제된다
	서버는 클라이언트들의 상태를 각각의 세션을 통해 저장하고 클라이언트가 요청을 보낼 시
	요청에 세션id가 같이 전달되어 동일한 ID를 가진 세션을 찾아 구분한다.

세션 동작방식
1. 클라이언트가 서버에 요청을 보낸다
2. 서버는 클라이언트를 식별할 수 있는 세션 ID를 발급한다
3. 세션 ID를 클라이언트에게 쿠키로 전송한다
4. 이 후 클라이언트는 요청을 보낼때마다 세션ID를 담은 쿠키를 보내게 된다
5. 서버에서는 세션 ID를 서버에 있는 세션과 비교하여 사용자를 식별한다
6. 그 외에도 세션에 데이터를 저장하여 사용할 수 있다