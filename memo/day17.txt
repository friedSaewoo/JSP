퍼블리싱 압축파일 풀기

finalProject 프로젝트 만들기

1. web.xml 만들기

2. 루트경로 /로 설정하기

3. WebContent에 assets폴더 만들고 압축 해제한 폴더 전부 넣기
   - 로그인, 회원가입, 게시판 페이지가 있는 것 확인

4. com.example.app.member.MemberFrontController.java
    com.example.app.board.BoardFrontController.java    
    만들고 extends HttpServlet 하고 
    doGet() , doPost() 재정의 해놓기
 
5. jsp파일은 WebContent에 프론트 컨트롤러와 동일한 위치로 만들기    
    com.example은 항상 고정되는 경로이므로 app폴더 안에 member폴더 만드는식   
    app/member/ join.jsp, login.jsp 만들기   
    app/board/ boardList.jsp, boardRead.jsp, boardWrite.jsp 만들기
    
6. 이제 html 코드를 각 jsp파일에 복붙하기

7. 경로 확인하기-css 작동하지 않음
   css 경로 수정하기

8. member 테이블 생성하기

9. mybatis 설정(빌드패스, lib 폴더에 jar추가하기)

10. config.xml
   <mappers>

11. 프론트컨트롤러 설정, 각 페이지 링크 연결시키기
   web.xml 파일 수정
   MemberFrontController 수정

   .jsp 파일들마다 버튼 링크 수정
      <a href = "${pageContext.request.contextPath}/member/login.me" ...>

   BoardFrontController 수정
   
12. 회원가입 서비스 구현하기
   com.example.app.member.dto.MemberDTO.java 만들기
      게터 세터, toString 오버라이딩까지 진행

13. config.xml 별칭 추가
   <typeAliases>
      <typeAlias type = "com.example.app.member.dto.MemberDTO" alias = "MemberDTO"/>

14. MemberMapper.xml
   <mapper namespace = "member">
      <insert id="join" parameterType = "MemberDTO">
         쿼리문작성
      </insert>
   </mapper>

15. com.example.app.member.dao.MemberDAO.java
   {
      SqlSession sqlSession;
      public MemberDAO(){
         sqlSession = MyBatisConfig.getSqlSessionFactory().openSession(true);
      }
      
      메소드
      public void join(MemberDTO memberDTO){
         sqlSession.insert("member.join", memberDTO);
      }
   }



기능추가
mapper(쿼리문 작성) -> dao(쿼리문,dto타입 사용) -> controller

serverException : 서블릿 컨테이너 내부에서 처리할 수 없는 예외가 발생한 경우
servletException : 서블릿 실행 도중에 문제가 발생한 경우

동기통신
	서버에 요청을 보내면 기다렸다가 서버의 응답을 받는 일반적인 통신 방법이다
	서버의 응답이 오기 전까지 다른 작업을 수행할 수 없다
	서버의 응답이 도착하면 페이지가 전환되며 같은 페이지에 머무르더라도 페이지가 새로고침이 된다

비동기 통신
	서버에 요청을 보내고 서버의 응답을 기다리는 동안 다른 작업을 처리할 수 있따
	서버의 응답이 도착해도 페이지가 새로고침 되지 않는다
	즉, 하나의 브라우저가 보여주는 하나의 페이지에서 데이터를 주고받는게 가능하며
	이를 통해 사용자의 경험을 개선하고 성능을 향상시킬 수 있다.

Ajax(Asynchronous JavaScript and XML)
	웹 페이지에서 서버와 비동기 통신을 하기 위한 기술이며, 화면의 일부만 데이터를 업데이트 할 수 있다
	JavaScript를 이용하여 JSON, XML형식의 데이터를 서버와 주고 받는다.
	일반 통신과 다르게 XMLHttpRequest를 사용하여 데이터를 주고 받는다.
	
jquery의 ajax 사용법
	$.ajax({
		url : "요청주소",
		type : "GET 또는 POST",
		data : "전송할 데이터",
		contentType : "전송할 데이터 형식",
		dataType : "받을 데이터 형식",
		success : function(response){
			//성공시 수행할 코드
		},
		error : function(xhr, status, error){
			//실패시 수행할 코드
			//xhr : XMLHttpRequest 객체
			console.log("Ajax 요청이 실패했습니다");
			console.log("상태코드 : ", status);
			console.log("에러 메시지 : ", error);
		}
	})

















